{"version":3,"file":"worker.f0706a63.js","sources":["../../src/components/D3Charts/src/getNearestPoints.ts","../../src/components/D3Charts/src/worker.ts"],"sourcesContent":["/*\n * Copyright 2022 Nightingale Team\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { GetNearestPointsFnParam, Serie, SerieDataItem, NearestPoint } from './interface';\n\nfunction getMsTs(ts: number, type: string) {\n  return type === 'X' ? ts * 1000 : ts;\n}\n\nfunction ascending(a: number | Date, b: number | Date): number {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction pickBy<T extends object>(obj: T, predicate: (key: keyof T) => boolean) {\n  const newObj: any = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (Object.prototype.toString.call(predicate) === '[object Function]' && predicate(key)) {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  return newObj;\n}\n\nfunction bisector(compare: (d: SerieDataItem, x: Date) => number) {\n  return {\n    left: (a: any[], x: any, lo?: any, hi?: any) => {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: (a: any[], x: any, lo?: any, hi?: any) => {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    },\n  };\n}\n\nexport default function getNearestPoints(dat: GetNearestPointsFnParam) {\n  const { series, x, xkey, ykey, timestamp, fillNull } = dat;\n  const xBisect = bisector(\n    (d, x) => {\n      return ascending(getMsTs(d[xkey], timestamp), x);\n    }\n  ).left;\n  const tsX = (new Date(x)).getTime();\n  const nearestPoints: NearestPoint[] = [];\n\n  if (Object.prototype.toString.call(series) !== '[object Array]') return [];\n  series.forEach((serie, i) => {\n    if (serie.visible === false) return;\n    const { name, color } = serie;\n    const serieWithEffective = pickBy<Serie>(serie, (key) => {\n      return key !== 'data';\n    });\n    let { data = [] } = serie;\n    if (Object.prototype.toString.call(data) !== '[object Array]') return;\n    data = data.filter(item => typeof item[ykey] === 'number' || typeof fillNull === 'number');\n\n    if (data.length === 0) return;\n\n    let nearestPoint: NearestPoint;\n    const pos = xBisect(data, x);\n    const smaller = data[pos - 1];\n    const larger = data[pos];\n\n    if (smaller && larger) {\n      const smallerX = getMsTs(smaller[xkey], timestamp);\n      const largerX = getMsTs(larger[xkey], timestamp);\n      let smallerY = smaller[ykey];\n      let largerY = larger[ykey];\n\n      if (smallerY === null && fillNull !== undefined) smallerY = fillNull;\n      if (largerY === null && fillNull !== undefined) largerY = fillNull;\n\n      if (tsX - smallerX < largerX - tsX) {\n        nearestPoint = {\n          ...smaller,\n          name,\n          color,\n          timestamp: smallerX,\n          value: smallerY,\n          serieIndex: i,\n          serieOptions: serieWithEffective,\n        };\n      } else {\n        nearestPoint = {\n          ...larger,\n          name,\n          color,\n          timestamp: largerX,\n          value: largerY,\n          serieIndex: i,\n          serieOptions: serieWithEffective,\n        };\n      }\n      nearestPoints.push(nearestPoint);\n    } else if (smaller) {\n      const smallerX = getMsTs(smaller[xkey], timestamp);\n      let smallerY = smaller[ykey];\n      if (smallerY === null && fillNull !== undefined) smallerY = fillNull;\n      nearestPoint = {\n        ...smaller,\n        name,\n        color,\n        timestamp: smallerX,\n        value: smallerY,\n        serieIndex: i,\n        serieOptions: serieWithEffective,\n      };\n      nearestPoints.push(nearestPoint);\n    } else if (larger) {\n      const largerX = getMsTs(larger[xkey], timestamp);\n      let largerY = larger[ykey];\n      if (largerY === null && fillNull !== undefined) largerY = fillNull;\n      nearestPoint = {\n        ...larger,\n        name,\n        color,\n        timestamp: largerX,\n        value: largerY,\n        serieIndex: i,\n        serieOptions: serieWithEffective,\n      };\n      nearestPoints.push(nearestPoint);\n    }\n  });\n\n  return nearestPoints;\n}\n","/*\n * Copyright 2022 Nightingale Team\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport getNearestPoints from './getNearestPoints';\nimport { Serie } from './interface';\n\ntype CacheType = {\n  [index: string]: string;\n};\ntype SeriesType = {\n  [index: string]: Serie[];\n};\n\nconst cache: CacheType = {};\nconst series: SeriesType = {};\nconst ctx: Worker = self as any;\n\nctx.addEventListener('message', (event) => {\n  const { data } = event;\n\n  if (data.id) {\n    if (!cache[data.id] || !data.flag) {\n      cache[data.id] = data.str;\n      series[data.id] = JSON.parse(data.str);\n    }\n  }\n\n  const nearestPoints = getNearestPoints({\n    x: data.x,\n    xkey: data.xkey,\n    ykey: data.ykey,\n    y0key: data.y0key,\n    timestamp: data.timestamp,\n    series: series[data.id],\n    fillNull: data.fillNull,\n  });\n\n  ctx.postMessage(nearestPoints); // TODO: targetOrigin\n});\n\nexport default ctx;\n"],"names":["ts","type","dat","series","x","xkey","ykey","timestamp","fillNull","xBisect","compare","d","x2","a","getMsTs","b","NaN","left","lo","hi","length","mid","right","tsX","Date","getTime","nearestPoints","Object","prototype","toString","call","series2","forEach","serie","i","visible","name","color","serieWithEffective","obj","predicate","newObj","key","hasOwnProperty","pickBy","nearestPoint","data","filter","item","pos","smaller","larger","smallerX","largerX","smallerY","largerY","__spreadProps","value","serieIndex","serieOptions","push","cache","ctx","self","addEventListener","event","id","flag","str","JSON","parse","getNearestPoints","y0key","postMessage"],"mappings":"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"}